const Generator = require('yeoman-generator');
const ReactTmpl = require('webpack-react-template');
const path = require('path');
const fs = require('fs');
const utils = require('../../utils/all');
const {firstPrompt, secondPrompt, thirdPrompt} = require('./prompts');

const baseRootPath = path.dirname(require.resolve('webpack-react-template'));

module.exports = class extends Generator {
  constructor(args, opts) {
      // Calling the super constructor is important so our generator is correctly set up
      super(args, opts);
      this.count = 0;
    // Use our plain template as source
    this.sourceRoot(baseRootPath);
  }

  /**
   * prompting of user
   * @returns {Promise.<TResult>} -
   */
  prompting() {
    return this.prompt(firstPrompt).then((answers) => {
      // Make sure to get the correct app name if it is not the default
      if(answers.appName !== utils.yeoman.getAppName()) {
        answers.appName = utils.yeoman.getAppName(answers.appName);
      }
      this.appName = answers.appName;
      this.inlineStyleTool = answers.inlineStyleTool;
    }).then(() => {
      if (this.inlineStyleTool) {
        return this.prompt(secondPrompt).then((answers) => {
          this.inlineStyleTools = answers.inlineStyleTools;
        });
      }
    }).then(() => {
      return this.prompt(thirdPrompt).then((answers) => {
        this.style = answers.style;
        this.cssmodules = answers.cssmodules;
        this.postcss = answers.postcss;
        this.cssnext = answers.cssnext;
      });
    })
  }

  /**
   * added dependences to package.json file
   * @param {Object} to -
   * @param {Boolean} env - devDependencies or dependencies
   * @param {Object} dependence -
   * @private
   */
  _setDependence(to, env, dependence) {
    if(dependence) {
      const {packages} = dependence;
      if(packages) {
        for(let dependency of packages) {
          env = (env) ? to.dependencies : to.devDependencies;
          env[dependency.name] = dependency.version;
        }
      }
    }
  }

  configuring() {
    // Generate our package.json. Make sure to also include the required dependencies for styles
    let defaultSettings = this.fs.readJSON(`${baseRootPath}/package.json`);
    let packageSettings = {
      name: this.appName,
      private: true,
      version: '0.0.1',
      description: `${this.appName} - Generated by generator-react-webpack-jest`,
      main: 'src/index.js',
      scripts: Object.assign(defaultSettings.scripts, {postinstall: "lerna bootstrap"}),
      repository: '',
      keywords: [],
      author: 'Your name here',
      devDependencies: defaultSettings.devDependencies,
      dependencies: defaultSettings.dependencies
    };
    packageSettings = Object.assign(defaultSettings, packageSettings);
    // Add needed inline styles tools
    const inlineStyleTools = utils.config.getChoiceByKey('inlineStyleTools', this.inlineStyleTools);
    this._setDependence(packageSettings, true, inlineStyleTools);

    // Add needed loaders if we have special styles
    let styleConfig = utils.config.getChoiceByKey('style', this.style);
    this._setDependence(packageSettings, false, styleConfig);

    // Add postcss module if enabled
    let postcssConfig = utils.config.getChoiceByKey('postcss', 'postcss');
    if (this.postcss) {
      this._setDependence(packageSettings, false, postcssConfig);
    }

    // Add cssmodules if enabled
    const cssmoduleConfig = utils.config.getChoiceByKey('cssmodules', 'cssmodules');
    if(this.cssmodules) {
      this._setDependence(packageSettings, true, cssmoduleConfig);
    }
    this.fs.writeJSON(this.destinationPath('package.json'), packageSettings);
  }
};
